version: "3.9"

services:

  # Контейнер для проксирования http запросов и ssh подключений
  traefik:
    image: "traefik:v2.7"
    container_name: "traefik"
    restart: always
    networks:
      - main_proxy_sandbox_network
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.ssh.address=:2222"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mainresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.mainresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.mainresolver.acme.email=${TRAEFIK_NOTIFICATION_EMAIL}"
      - "--certificatesresolvers.mainresolver.acme.storage=/tmp/acme/acme.json"
      - "--providers.docker.network=main_proxy_sandbox_network"
      - "--accesslog=true"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 2222
        published: 2222
        protocol: tcp
        mode: host
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "acme_json:/tmp/acme"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${MAIN_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${BASIC_AUTH}"
      - "traefik.http.middlewares.https-only.redirectscheme.scheme=https"
      - "traefik.http.middlewares.secured.chain.middlewares=auth"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=mainresolver"
      - "traefik.http.routers.redirhttps.entrypoints=web"
      - "traefik.http.routers.redirhttps.middlewares=https-only"
      - "traefik.http.middlewares.fixHeaders.headers.customrequestheaders.HTTPS=YES"
      - "traefik.http.middlewares.fixHeaders.headers.customrequestheaders.X-Forwarded-Port=443"
      - "traefik.http.middlewares.fixHeaders.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.corsHeaders.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.corsHeaders.headers.accesscontrolallowheaders=DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-API-KEY,Authorization"
      - "traefik.http.middlewares.allowFrames.headers.customresponseheaders.X-Frame-Options="

  # Контейнер для управления и мониторинга докер контейнеров
  portainer:
    image: cr.portainer.io/portainer/portainer-ce:2.19.2
    container_name: "portainer"
    restart: always
    networks:
      - main_proxy_sandbox_network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - portainer_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${MAIN_DOMAIN}`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.middlewares=https-only"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=mainresolver"

  # Контейнер для подключения и управления mysql базами данных песочниц
  adminer:
    image: ghcr.io/serdcebolit/adminer:latest
    container_name: "adminer"
    restart: always
    networks:
      - main_proxy_sandbox_network
      - main_proxy_db_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.middlewares=auth"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=mainresolver"
    environment:
      - ADMINER_DESIGN=nette
      - PORTAINER_LOGIN=${PORTAINER_LOGIN}
      - PORTAINER_PASSWORD=${PORTAINER_PASSWORD}

  # Контейнер для проксирования ssh подключений httpd контейнеров
  sshproxy:
    image: farmer1992/sshpiperd:v1.0.96
    restart: always
    environment:
      - PLUGIN=workingdir
      - SSHPIPERD_WORKINGDIR_NOCHECKPERM=true
      - SSHPIPERD_WORKINGDIR_ALLOWBADUSERNAME=true
      - SSHPIPERD_DROP_HOSTKEYS_MESSAGE=true
    volumes:
      - ./ssh_host_rsa_key:/etc/ssh/
      - sshpiper_config:/var/sshpiper
    networks:
      - main_proxy_sandbox_network
      - main_proxy_sshproxy
    # Поднимается 2 реплики сервиса и traefik балансирует нагрузку
    deploy:
        replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.sshproxy.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.sshproxy.entrypoints=ssh"
      - "traefik.tcp.services.sshproxy.loadbalancer.server.port=2222"


  # Контейнер для генерации ssh ключей и конфигов для sshproxy
  sshproxy_gen:
    image: ghcr.io/serdcebolit/sshproxy-gen:latest
    container_name: main_sshproxy_gen
    restart: always
    networks:
      - main_proxy_sandbox_network
      - main_proxy_sshproxy
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./ssh_host_rsa_key:/etc/ssh/
      - sshpiper_config:/usr/src/app/sshpiper_config

volumes:
  portainer_data:
  sshpiper_config:
  acme_json:

networks:
  main_proxy_sandbox_network:
    driver: bridge
    name: main_proxy_sandbox_network
  main_proxy_sshproxy:
    driver: bridge
    name: main_proxy_sshproxy
  main_proxy_db_network:
    driver: bridge
    name: main_proxy_db_network
