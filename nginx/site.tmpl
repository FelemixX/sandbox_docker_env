{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ $external_http_port := coalesce $.Env.HTTP_PORT "80" }}
{{ $external_https_port := coalesce $.Env.HTTPS_PORT "443" }}
{{ $debug_all := $.Env.DEBUG }}
{{ $sha1_upstream_name := parseBool (coalesce $.Env.SHA1_UPSTREAM_NAME "false") }}




{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ $host := trim $host }}
{{ $is_regexp := hasPrefix "~" $host }}
{{ $upstream_name := when (or $is_regexp $sha1_upstream_name) (sha1 $host) $host }}

# {{ $host }}
upstream {{ $upstream_name }} {

{{ $server_found := "false" }}
{{ range $container := $containers }}
	{{ $debug := (eq (coalesce $container.Env.DEBUG $debug_all "false") "true") }}
	{{/* If only 1 port exposed, use that as a default, else 80 */}}
	{{ $defaultPort := (when (eq (len $container.Addresses) 1) (first $container.Addresses) (dict "Port" "80")).Port }}
	{{ $port := (coalesce $container.Env.VIRTUAL_PORT $defaultPort) }}
	{{ $address := where $container.Addresses "Port" $port | first }}
	{{ if $debug }}
	# Exposed ports: {{ $container.Addresses }}
	# Default virtual port: {{ $defaultPort }}
	# VIRTUAL_PORT: {{ $container.Env.VIRTUAL_PORT }}
		{{ if not $address }}
	# /!\ Virtual port not exposed
		{{ end }}
	{{ end }}
	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
	## Can be connected with "{{ $containerNetwork.Name }}" network
				{{ if $address }}
					{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
					{{ if and $container.Node.ID $address.HostPort }}
						{{ $server_found = "true" }}
	# {{ $container.Node.Name }}/{{ $container.Name }}
	server {{ $container.Node.Address.IP }}:{{ $address.HostPort }};
					{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
					{{ else if $containerNetwork }}
						{{ $server_found = "true" }}
	# {{ $container.Name }}
	server {{ $containerNetwork.IP }}:{{ $address.Port }};
					{{ end }}
				{{ else if $containerNetwork }}
	# {{ $container.Name }}
					{{ if $containerNetwork.IP }}
						{{ $server_found = "true" }}
	server {{ $containerNetwork.IP }}:{{ $port }};
					{{ else }}
	# /!\ No IP for this network!
					{{ end }}
				{{ end }}
			{{ else }}
	# Cannot connect to network '{{ $containerNetwork.Name }}' of this container
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
{{/* nginx-proxy/nginx-proxy#1105 */}}
{{ if (eq $server_found "false") }}
	# Fallback entry
	server 127.0.0.1 down;
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := trim (or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http") }}

{{/* Get the NETWORK_ACCESS defined by containers w/ the same vhost, falling back to "external" */}}
{{ $network_tag := or (first (groupByKeys $containers "Env.NETWORK_ACCESS")) "external" }}

{{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
{{ $https_method := or (first (groupByKeys $containers "Env.HTTPS_METHOD")) (or $.Env.HTTPS_METHOD "redirect") }}

{{/* Get the HSTS defined by containers w/ the same vhost, falling back to "max-age=31536000" */}}
{{ $hsts := or (first (groupByKeys $containers "Env.HSTS")) (or $.Env.HSTS "max-age=31536000") }}

{{/* Get the VIRTUAL_ROOT By containers w/ use fastcgi root */}}
{{ $vhost_root := or (first (groupByKeys $containers "Env.VIRTUAL_ROOT")) "/var/www/public" }}


{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}



{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := trimSuffix ".crt" $vhostCert }}
{{ $vhostCert := trimSuffix ".key" $vhostCert }}

{{/* Use the cert specified on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ $is_https := (and (ne $https_method "nohttps") (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

{{ $is_https := (and (ne $https_method "nohttps") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

{{ if or (not $is_https) (eq $https_method "noredirect") }}

server {
	server_name {{ $host }};
	listen {{ $external_http_port }} {{ $default_server }};

	server_name_in_redirect off;

	proxy_set_header	X-Real-IP        $remote_addr;
    proxy_set_header	X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header	Host $host:80;

    set $proxyserver	"{{ trim $proto }}://{{ trim $upstream_name }}";
    set $docroot		"{{ $vhost_root }}";

    index index.php;
    root $docroot;

    # Redirect to ssl if need
    if (-f $docroot/.htsecure) { rewrite ^(.*)$ https://$host$1 permanent; }

    # custom options for sites; doesn't changes on update
    include bx/site_settings/default/*.conf;
    # Include parameters common to all websites
    include bx/conf/bitrix.conf;
}

{{ end }}

{{ if $is_https }}

server {
    listen	443 default_server ssl;
    server_name _;

    # SSL Certificates
    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

    server_name_in_redirect	off;

    proxy_set_header	X-Real-IP	$remote_addr;
    proxy_set_header	X-Forwarded-For	$proxy_add_x_forwarded_for;
    proxy_set_header	Host		$host:443;
    proxy_set_header	HTTPS 		YES;

    set $proxyserver	"{{ trim $proto }}://{{ trim $upstream_name }}";
    set $docroot		"{{ $vhost_root }}";

    index index.php;
    root $docroot;

    # custom options for sites; doesn't changes on update
    include bx/site_settings/default/*.conf;
    # Include parameters common to all websites
    include bx/conf/bitrix.conf;
}

{{ end }}
{{ end }}